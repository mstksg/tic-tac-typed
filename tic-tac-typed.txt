-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/mstksg/tic-tac-typed#readme</a>
@package tic-tac-typed
@version 0.1.0.0

module Data.Type.Sel

-- | A <tt><a>Sel</a> n as a</tt> is an index into a list <tt>as</tt> that
--   the <tt>n</tt>th index is <tt>a</tt>.
data Sel :: N -> [k] -> k -> Type
[SelZ] :: Sel  'Z (a : as) a
[SelS] :: Sel n as a -> Sel ( 'S n) (b : as) a
type InBounds n = Found (TyPP (Sel n))
type OutOfBounds n = Not (InBounds n)

-- | Convert a normal '-&gt;' type constructor taking two arguments into a
--   <a>ParamPred</a>.
--   
--   <pre>
--   <a>TyPP</a> :: (k -&gt; v -&gt; <a>Type</a>) -&gt; <a>ParamPred</a> k v
--   </pre>
data TyPP (a :: k -> v -> Type) (b :: k) (c :: TyFun v Type) :: forall k v. () => k -> v -> Type -> k -> TyFun v Type -> Type
instance Data.Singletons.Internal.SingI n => Data.Type.Predicate.Decidable (Data.Type.Sel.InBounds n)

module TTT.Core
data Piece
PX :: Piece
PO :: Piece
type SPiece = (Sing :: Piece -> Type)
data Result
ResCats :: Result
ResWin :: Piece -> Result
type SResult = (Sing :: Result -> Type)
type Board = [[Maybe Piece]]

-- | The singleton kind-indexed data family.
data family Sing (a :: k) :: Type
altP :: Piece -> Piece
type family AltP (a_ay8J :: Piece) :: Piece
sAltP :: forall (t_aylB :: Piece). Sing t_aylB -> Sing (Apply AltPSym0 t_aylB :: Piece)
lines :: [[a_awQc]] -> [[a_awQc]]
type family Lines (a_ay8G :: [[a_awQc]]) :: [[a_awQc]]
sLines :: forall a_awQc (t_aylz :: [[a_awQc]]). Sing t_aylz -> Sing (Apply LinesSym0 t_aylz :: [[a_awQc]])
emptyBoard :: Board
type family EmptyBoard :: [[Maybe Piece]]
sEmptyBoard :: Sing (EmptyBoardSym0 :: [[Maybe Piece]])
type family PlaceBoard a_aNit a_aNiu a_aNiv a_aNiw
sPlaceBoard :: forall arg_aNiF arg_aNiG arg_aNiH arg_aNiI. Sing arg_aNiF -> Sing arg_aNiG -> Sing arg_aNiH -> Sing arg_aNiI -> Sing (Apply (Apply (Apply (Apply PlaceBoardSym0 arg_aNiF) arg_aNiG) arg_aNiH) arg_aNiI)

-- | Convert a parameterized predicate into a predicate on the parameter.
--   
--   A <tt><a>Found</a> p</tt> is a predicate on <tt>p :: <a>ParamPred</a>
--   k v</tt> that tests a <tt>k</tt> for the fact that there exists a
--   <tt>v</tt> where <tt><a>ParamPred</a> k v</tt> is satisfied.
--   
--   Intended as the basic interface for <a>ParamPred</a>, since it turns a
--   <a>ParamPred</a> into a normal <a>Predicate</a>, which can have
--   <a>Decidable</a> and <a>Provable</a> instances.
--   
--   For some context, an instance of <tt><a>Provable</a> (<a>Found</a>
--   P)</tt>, where <tt>P :: <a>ParamPred</a> k v</tt>, means that for any
--   input <tt>x :: k</tt>, we can always find a <tt>y :: v</tt> such that
--   we have <tt>P x @@ y</tt>.
--   
--   In the language of quantifiers, it means that forall <tt>x :: k</tt>,
--   there exists a <tt>y :: v</tt> such that <tt>P x @@ y</tt>.
--   
--   For an instance of <tt><a>Decidable</a> (<a>Found</a> P)</tt>, it
--   means that for all <tt>x :: k</tt>, we can prove or disprove the fact
--   that there exists a <tt>y :: v</tt> such that <tt>P x @@ y</tt>.
data Found (a :: ParamPred k v) (b :: TyFun k Type) :: forall v k. () => ParamPred k v -> TyFun k Type -> Type

-- | Predicate that a board is won by a given player
type Winner = (PPMap LinesSym0 (AnyMatch [] LineWon) :: ParamPred Board Piece)

-- | Predicate that all spots have been played (cats game).
--   
--   <pre>
--   <a>Cats</a> :: <a>Predicate</a> <a>Board</a>
--   </pre>
type Cats = (All ([] :.: []) (NotNull Maybe) :: Predicate CompBoard)

-- | Witness that a game is in a specific mode.
--   
--   Generate using <tt>Taken</tt> for 'Found BoardResultFOr'.
data BoardResult :: Board -> Result -> Type
[GMVictory] :: (Winner b @@ p) -> BoardResult b ( 'ResWin p)
[GMCats] :: (Not (Found Winner) @@ b) -> (Cats @@  'Comp b) -> BoardResult b  'ResCats
data GameOver :: ParamPred Board Result

-- | Current board and currently expected player.
--   
--   Can only be constructed by appending valid moves onto a known valid
--   game state.
data GameState :: Piece -> Board -> Type
[GSStart] :: GameState  'PX EmptyBoard
[GSUpdate] :: (InPlay @@ b1) -> Update ij p b1 b2 -> GameState p b1 -> GameState (AltP p) b2

-- | Represents a legal update to a board (in-bounds, and does not
--   overwrite a played piece)
data Update :: (N, N) -> Piece -> Board -> Board -> Type
[Update] :: Coord b  'Nothing '(i, j) -> Sing p -> Update '(i, j) p b (PlaceBoard i j p b)

-- | Represents a board and coordinate with the current item at position on
--   the board.
data Coord :: Board -> Maybe Piece -> (N, N) -> Type
[Coord] :: Sel i b row -> Sel j row p -> Coord b p '(i, j)
type InPlay = Not (Found GameOver)

-- | The empty board is in-play.
startInPlay :: InPlay @@ EmptyBoard

-- | Type-safe "play".
play :: forall b i j row p. () => (InPlay @@ b) -> Sel i b row -> Sel j row  'Nothing -> Sing p -> GameState p b -> GameState (AltP p) (PlaceBoard i j p b)

-- | Potential results of <tt>pick</tt>: A verified move, or one of many
--   failures (with proof of failures)
data Pick :: (N, N, Board) -> Type
[PickValid] :: Sel i b row -> Sel j row  'Nothing -> Pick '(i, j, b)
[PickPlayed] :: Sel i b row -> Sel j row ( 'Just p) -> Sing p -> Pick '(i, j, b)
[PickOoBX] :: (OutOfBounds i @@ b) -> Pick '(i, j, b)
[PickOoBY] :: Sel i b row -> (OutOfBounds j @@ row) -> Pick '(i, j, b)
data ResWinSym0 :: (~>) Piece Result
type ResWinSym1 (t6989586621679141020 :: Piece) = ResWin t6989586621679141020
type ResCatsSym0 = ResCats
type BoardSym0 = Board
type CompBoardSym0 = CompBoard
data AltPSym0 :: (~>) Piece Piece
type AltPSym1 (a6989586621679141029 :: Piece) = AltP a6989586621679141029
data LinesSym0 :: forall a6989586621679136036. (~>) [[a6989586621679136036]] [[a6989586621679136036]]
type LinesSym1 (a6989586621679141026 :: [[a6989586621679136036]]) = Lines a6989586621679141026
type EmptyBoardSym0 = EmptyBoard
data PlaceBoardSym0 a6989586621679199293
data PlaceBoardSym1 a6989586621679199293 a6989586621679199294
data PlaceBoardSym2 a6989586621679199293 a6989586621679199294 a6989586621679199295
data PlaceBoardSym3 a6989586621679199293 a6989586621679199294 a6989586621679199295 a6989586621679199296
type PlaceBoardSym4 a6989586621679199293 a6989586621679199294 a6989586621679199295 a6989586621679199296 = PlaceBoard a6989586621679199293 a6989586621679199294 a6989586621679199295 a6989586621679199296
instance Data.Type.Predicate.Provable (Data.Type.Predicate.TyPred TTT.Core.Pick)
instance Data.Type.Predicate.Decidable (Data.Type.Predicate.Param.Found TTT.Core.GameOver)
instance Data.Type.Predicate.Decidable (Data.Type.Predicate.Param.Found TTT.Core.LineWon)
instance Data.Type.Predicate.Auto.Auto (Data.Type.Predicate.Not (Data.Type.Predicate.Param.Found TTT.Core.LineWon)) ('GHC.Maybe.Nothing : as)
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings TTT.Core.PlaceBoardSym0
instance Data.Singletons.Internal.SingI TTT.Core.PlaceBoardSym0
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings (TTT.Core.PlaceBoardSym1 a6989586621679199293)
instance Data.Singletons.Internal.SingI d => Data.Singletons.Internal.SingI (TTT.Core.PlaceBoardSym1 d)
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings (TTT.Core.PlaceBoardSym2 a6989586621679199294 a6989586621679199293)
instance (Data.Singletons.Internal.SingI d1, Data.Singletons.Internal.SingI d2) => Data.Singletons.Internal.SingI (TTT.Core.PlaceBoardSym2 d1 d2)
instance forall k1 (a6989586621679199295 :: Data.Type.Lens.N) (a6989586621679199294 :: Data.Type.Lens.N) (a6989586621679199293 :: k1). Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings (TTT.Core.PlaceBoardSym3 a6989586621679199295 a6989586621679199294 a6989586621679199293)
instance forall k1 (d1 :: Data.Type.Lens.N) (d2 :: Data.Type.Lens.N) (d3 :: k1). (Data.Singletons.Internal.SingI d1, Data.Singletons.Internal.SingI d2, Data.Singletons.Internal.SingI d3) => Data.Singletons.Internal.SingI (TTT.Core.PlaceBoardSym3 d1 d2 d3)
instance GHC.Classes.Eq TTT.Core.Result
instance GHC.Show.Show TTT.Core.Result
instance GHC.Classes.Eq TTT.Core.Piece
instance GHC.Show.Show TTT.Core.Piece
instance GHC.Show.Show (Data.Singletons.Internal.Sing z)
instance Data.Singletons.ShowSing.ShowSing TTT.Core.Piece => GHC.Show.Show (Data.Singletons.Internal.Sing z)
instance Data.Singletons.Prelude.Eq.PEq TTT.Core.Result
instance Data.Singletons.Prelude.Eq.PEq TTT.Core.Piece
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings TTT.Core.ShowsPrec_6989586621679141808Sym0
instance Data.Singletons.Prelude.Show.PShow TTT.Core.Result
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings (TTT.Core.ShowsPrec_6989586621679141808Sym1 a6989586621679141805)
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings (TTT.Core.ShowsPrec_6989586621679141808Sym2 a6989586621679141806 a6989586621679141805)
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings TTT.Core.ShowsPrec_6989586621679141786Sym0
instance Data.Singletons.Prelude.Show.PShow TTT.Core.Piece
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings (TTT.Core.ShowsPrec_6989586621679141786Sym1 a6989586621679141783)
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings (TTT.Core.ShowsPrec_6989586621679141786Sym2 a6989586621679141784 a6989586621679141783)
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings TTT.Core.AltPSym0
instance Data.Singletons.Internal.SingI TTT.Core.AltPSym0
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings TTT.Core.LinesSym0
instance Data.Singletons.Internal.SingI TTT.Core.LinesSym0
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings TTT.Core.DiagonalSym0
instance Data.Singletons.Internal.SingI TTT.Core.DiagonalSym0
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings TTT.Core.ResWinSym0
instance Data.Singletons.Internal.SingI TTT.Core.ResWinSym0
instance Data.Singletons.Internal.SingKind TTT.Core.Result
instance Data.Singletons.Prelude.Show.SShow TTT.Core.Piece => Data.Singletons.Prelude.Show.SShow TTT.Core.Result
instance Data.Singletons.Prelude.Eq.SEq TTT.Core.Piece => Data.Singletons.Prelude.Eq.SEq TTT.Core.Result
instance Data.Singletons.Decide.SDecide TTT.Core.Piece => Data.Singletons.Decide.SDecide TTT.Core.Result
instance Data.Singletons.Internal.SingI 'TTT.Core.ResCats
instance Data.Singletons.Internal.SingI n => Data.Singletons.Internal.SingI ('TTT.Core.ResWin n)
instance Data.Singletons.Internal.SingI (Data.Singletons.Internal.TyCon1 'TTT.Core.ResWin)
instance Data.Singletons.Internal.SingKind TTT.Core.Piece
instance Data.Singletons.Prelude.Show.SShow TTT.Core.Piece
instance Data.Singletons.Prelude.Eq.SEq TTT.Core.Piece
instance Data.Singletons.Decide.SDecide TTT.Core.Piece
instance Data.Singletons.Internal.SingI 'TTT.Core.PX
instance Data.Singletons.Internal.SingI 'TTT.Core.PO

module TTT.Controller
type Controller m p = forall b. CContext p b -> m (Maybe (Move b))
type Move b = Σ (N, N) (TyCon (Coord b  'Nothing))
data CContext p b
CC :: Sing b -> (InPlay @@ b) -> GameState p b -> Sing p -> CContext p b
[_ccBoard] :: CContext p b -> Sing b
[_ccInPlay] :: CContext p b -> InPlay @@ b
[_ccGameState] :: CContext p b -> GameState p b
[_ccPlayer] :: CContext p b -> Sing p

-- | Picks the first valid move in the given list
priorityController :: Applicative m => [(N, N)] -> Controller m p

-- | Picks a random move
randomController :: (PrimMonad m, MonadReader (Gen (PrimState m)) m) => Controller m p
validMoves :: Sing b -> Map (N, N) (Move b)
shuffledValidMoves :: PrimMonad m => Sing b -> Gen (PrimState m) -> m [((N, N), Move b)]

-- | Return a controller that, some percentage of the time, picks randomly
--   instead.
faulty :: (PrimMonad m, MonadReader (Gen (PrimState m)) m) => Double -> Controller m p -> Controller m p

module TTT.Controller.Minimax

-- | This minimax implementation is "verified" in the sense that it cannot
--   make any illegal moves. We sort of get this "for free". It is also
--   verified that we will rank and sort the pieces correctly (assuming the
--   Ord instance is sound) depending on who is playing.
minimaxController :: (PrimMonad m, MonadReader (Gen (PrimState m)) m) => N -> Controller m p

-- | This minimax implementation is "more verified" than the original one.
--   In addition to the verifications of the original one, we verify that
--   the search algorithm doesn't go further than the number of steps, and
--   also that at each step we are being consistent with the board and
--   possible moves.
--   
--   However, it is not a "verified AI" in that it can still make the wrong
--   choice in the end. The only thing verified really is that it
--   interprets the information it sees correctly.
minimaxController' :: (PrimMonad m, MonadReader (Gen (PrimState m)) m) => N -> Controller m p
newtype RankRes (p :: Piece)
RR :: Maybe Result -> RankRes
[getRR] :: RankRes -> Maybe Result
instance GHC.Classes.Eq (TTT.Controller.Minimax.RankRes p)
instance GHC.Show.Show (TTT.Controller.Minimax.RankRes p)
instance Data.Singletons.Internal.SingI p => GHC.Classes.Ord (TTT.Controller.Minimax.RankRes p)
instance Data.Singletons.Decide.SDecide k => Data.GADT.Compare.GEq Data.Singletons.Internal.Sing

module TTT.Controller.Console

-- | Will never allow any invalid moves.
consoleController :: MonadIO m => Controller m p
displayBoard :: Board -> String
