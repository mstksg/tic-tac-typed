-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/mstksg/tic-tac-typed#readme</a>
@package tic-tac-typed
@version 0.1.0.0

module Data.Type.Nat
data N
Z :: N
S :: N -> N
type SN = (Sing :: N -> Type)

-- | The singleton kind-indexed data family.
addN :: N -> N -> N
sAddN :: forall (t_andW :: N) (t_andX :: N). Sing t_andW -> Sing t_andX -> Sing (Apply (Apply AddNSym0 t_andW) t_andX :: N)
data LT :: N -> N -> Type
[LTZ] :: LT  'Z n
[LTS] :: LT n m -> LT ( 'S n) ( 'S m)
type ZSym0 = Z
data SSym0 :: (~>) N N
type SSym1 (t6989586621679093390 :: N) = S t6989586621679093390
data AddNSym0 :: (~>) N ((~>) N N)
data AddNSym1 (a6989586621679093392 :: N) :: (~>) N N
type AddNSym2 (a6989586621679093392 :: N) (a6989586621679093393 :: N) = AddN a6989586621679093392 a6989586621679093393
instance GHC.Classes.Ord Data.Type.Nat.N
instance GHC.Classes.Eq Data.Type.Nat.N
instance GHC.Show.Show Data.Type.Nat.N
instance Data.Singletons.Prelude.Eq.PEq Data.Type.Nat.N
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings Data.Type.Nat.Compare_6989586621679099058Sym0
instance Data.Singletons.Prelude.Ord.POrd Data.Type.Nat.N
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings (Data.Type.Nat.Compare_6989586621679099058Sym1 a6989586621679099056)
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings Data.Type.Nat.ShowsPrec_6989586621679097161Sym0
instance Data.Singletons.Prelude.Show.PShow Data.Type.Nat.N
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings (Data.Type.Nat.ShowsPrec_6989586621679097161Sym1 a6989586621679097158)
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings (Data.Type.Nat.ShowsPrec_6989586621679097161Sym2 a6989586621679097159 a6989586621679097158)
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings (Data.Type.Nat.AddNSym1 a6989586621679093392)
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings Data.Type.Nat.AddNSym0
instance Data.Singletons.Internal.SingI Data.Type.Nat.AddNSym0
instance Data.Singletons.Internal.SingI d => Data.Singletons.Internal.SingI (Data.Type.Nat.AddNSym1 d)
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings Data.Type.Nat.SSym0
instance Data.Singletons.Internal.SingI Data.Type.Nat.SSym0
instance Data.Singletons.Internal.SingKind Data.Type.Nat.N
instance Data.Singletons.Prelude.Show.SShow Data.Type.Nat.N => Data.Singletons.Prelude.Show.SShow Data.Type.Nat.N
instance Data.Singletons.Prelude.Ord.SOrd Data.Type.Nat.N => Data.Singletons.Prelude.Ord.SOrd Data.Type.Nat.N
instance Data.Singletons.Prelude.Eq.SEq Data.Type.Nat.N => Data.Singletons.Prelude.Eq.SEq Data.Type.Nat.N
instance Data.Singletons.Decide.SDecide Data.Type.Nat.N => Data.Singletons.Decide.SDecide Data.Type.Nat.N
instance Data.Singletons.ShowSing.ShowSing Data.Type.Nat.N => Data.Singletons.ShowSing.ShowSing Data.Type.Nat.N
instance Data.Singletons.ShowSing.ShowSing Data.Type.Nat.N => GHC.Show.Show (Data.Singletons.Internal.Sing z)
instance Data.Singletons.Internal.SingI 'Data.Type.Nat.Z
instance Data.Singletons.Internal.SingI n => Data.Singletons.Internal.SingI ('Data.Type.Nat.S n)
instance Data.Singletons.Internal.SingI (Data.Singletons.Internal.TyCon1 'Data.Type.Nat.S)

module Data.Type.Sel

-- | A <tt><a>Sel</a> n as a</tt> is an index into a list <tt>as</tt> that
--   the <tt>n</tt>th index is <tt>a</tt>.
data Sel :: N -> [k] -> k -> Type
[SelZ] :: Sel  'Z (a : as) a
[SelS] :: Sel n as a -> Sel ( 'S n) (b : as) a
mapIx :: N -> (a_aLRD -> a_aLRD) -> [a_aLRD] -> [a_aLRD]
sMapIx :: forall a_aLRD (t_aLSV :: N) (t_aLSW :: (~>) a_aLRD a_aLRD) (t_aLSX :: [a_aLRD]). Sing t_aLSV -> Sing t_aLSW -> Sing t_aLSX -> Sing (Apply (Apply (Apply MapIxSym0 t_aLSV) t_aLSW) t_aLSX :: [a_aLRD])
setIx :: N -> a_aLRC -> [a_aLRC] -> [a_aLRC]
sSetIx :: forall a_aLRC (t_aLT1 :: N) (t_aLT2 :: a_aLRC) (t_aLT3 :: [a_aLRC]). Sing t_aLT1 -> Sing t_aLT2 -> Sing t_aLT3 -> Sing (Apply (Apply (Apply SetIxSym0 t_aLT1) t_aLT2) t_aLT3 :: [a_aLRC])
overSel :: forall k n (as :: [k]) (a :: k) (f :: k ~> k). () => Sel n as a -> Sing f -> Sing as -> Sing (MapIx n f as)
setSel :: forall k n (as :: [k]) (a :: k) (b :: k). () => Sel n as a -> Sing b -> Sing as -> Sing (SetIx n b as)
listSel :: forall k n (as :: [k]). () => Sing n -> Sing as -> Decision (Σ k (TyCon (Sel n as)))
type OutOfBounds n (as :: [k]) = Refuted (Σ k (TyCon (Sel n as)))
mapIx_proof :: forall n as a f. () => Sel n as a -> Sing as -> Sel n (MapIx n f as) (f @@ a)
setIx_proof :: forall n as a b. () => Sel n as a -> Sing as -> Sel n (SetIx n b as) b
data MapIxSym0 :: forall a6989586621679193785. (~>) N ((~>) ((~>) a6989586621679193785 a6989586621679193785) ((~>) [a6989586621679193785] [a6989586621679193785]))
data MapIxSym1 (a6989586621679193841 :: N) :: forall a6989586621679193785. (~>) ((~>) a6989586621679193785 a6989586621679193785) ((~>) [a6989586621679193785] [a6989586621679193785])
data MapIxSym2 (a6989586621679193841 :: N) (a6989586621679193842 :: (~>) a6989586621679193785 a6989586621679193785) :: (~>) [a6989586621679193785] [a6989586621679193785]
type MapIxSym3 (a6989586621679193841 :: N) (a6989586621679193842 :: (~>) a6989586621679193785 a6989586621679193785) (a6989586621679193843 :: [a6989586621679193785]) = MapIx a6989586621679193841 a6989586621679193842 a6989586621679193843
data SetIxSym0 :: forall a6989586621679193784. (~>) N ((~>) a6989586621679193784 ((~>) [a6989586621679193784] [a6989586621679193784]))
data SetIxSym1 (a6989586621679193854 :: N) :: forall a6989586621679193784. (~>) a6989586621679193784 ((~>) [a6989586621679193784] [a6989586621679193784])
data SetIxSym2 (a6989586621679193854 :: N) (a6989586621679193855 :: a6989586621679193784) :: (~>) [a6989586621679193784] [a6989586621679193784]
type SetIxSym3 (a6989586621679193854 :: N) (a6989586621679193855 :: a6989586621679193784) (a6989586621679193856 :: [a6989586621679193784]) = SetIx a6989586621679193854 a6989586621679193855 a6989586621679193856
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings Data.Type.Sel.SetIxSym0
instance Data.Singletons.Internal.SingI Data.Type.Sel.SetIxSym0
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings (Data.Type.Sel.SetIxSym1 a6989586621679193854 a6989586621679193784)
instance Data.Singletons.Internal.SingI d => Data.Singletons.Internal.SingI (Data.Type.Sel.SetIxSym1 d a)
instance forall a6989586621679193784 (a6989586621679193855 :: Data.Type.Nat.N) (a6989586621679193854 :: a6989586621679193784). Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings (Data.Type.Sel.SetIxSym2 a6989586621679193855 a6989586621679193854)
instance forall a (d1 :: Data.Type.Nat.N) (d2 :: a). (Data.Singletons.Internal.SingI d1, Data.Singletons.Internal.SingI d2) => Data.Singletons.Internal.SingI (Data.Type.Sel.SetIxSym2 d1 d2)
instance forall a6989586621679193785 (a6989586621679193842 :: Data.Type.Nat.N) (a6989586621679193841 :: a6989586621679193785 Data.Singletons.Internal.~> a6989586621679193785). Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings (Data.Type.Sel.MapIxSym2 a6989586621679193842 a6989586621679193841)
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings (Data.Type.Sel.MapIxSym1 a6989586621679193841 a6989586621679193785)
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings Data.Type.Sel.MapIxSym0
instance Data.Singletons.Internal.SingI Data.Type.Sel.MapIxSym0
instance Data.Singletons.Internal.SingI d => Data.Singletons.Internal.SingI (Data.Type.Sel.MapIxSym1 d a)
instance forall a (d1 :: Data.Type.Nat.N) (d2 :: a Data.Singletons.Internal.~> a). (Data.Singletons.Internal.SingI d1, Data.Singletons.Internal.SingI d2) => Data.Singletons.Internal.SingI (Data.Type.Sel.MapIxSym2 d1 d2)

module TTT.Core
data Piece
PX :: Piece
PO :: Piece
type SPiece = (Sing :: Piece -> Type)
data GameOver
GOCats :: GameOver
GOWin :: Piece -> GameOver
type SGameOver = (Sing :: GameOver -> Type)
type Board = [[Maybe Piece]]

-- | The singleton kind-indexed data family.
altP :: Piece -> Piece
sAltP :: forall (t_aQBT :: Piece). Sing t_aQBT -> Sing (Apply AltPSym0 t_aQBT :: Piece)
lines :: [[a_aPSy]] -> [[a_aPSy]]
sLines :: forall a_aPSy (t_aQBR :: [[a_aPSy]]). Sing t_aQBR -> Sing (Apply LinesSym0 t_aQBR :: [[a_aPSy]])
emptyBoard :: Board
sEmptyBoard :: Sing (EmptyBoardSym0 :: [[Maybe Piece]])
placeBoard :: N -> N -> Piece -> Board -> Board
sPlaceBoard :: forall (t_aQBH :: N) (t_aQBI :: N) (t_aQBJ :: Piece) (t_aQBK :: [[Maybe Piece]]). Sing t_aQBH -> Sing t_aQBI -> Sing t_aQBJ -> Sing t_aQBK -> Sing (Apply (Apply (Apply (Apply PlaceBoardSym0 t_aQBH) t_aQBI) t_aQBJ) t_aQBK :: [[Maybe Piece]])

-- | Current board and currently expected player.
--   
--   Can only be constructed by appending valid moves onto a known valid
--   game state.
data GameState :: Piece -> Board -> Type
[GSStart] :: GameState  'PX EmptyBoard
[GSUpdate] :: InPlay b1 -> Update ij p b1 b2 -> GameState p b1 -> GameState (AltP p) b2
data AnyVictory b :: Piece ~> Type

-- | Represents a legal update to a board (in-bounds, and does not
--   overwrite a played piece)
data Update :: (N, N) -> Piece -> Board -> Board -> Type
[Update] :: Coord b  'Nothing '(i, j) -> Sing p -> Update '(i, j) p b (PlaceBoard i j p b)

-- | Represents a board and coordinate with the current item at position on
--   the board.
data Coord :: Board -> Maybe Piece -> (N, N) -> Type
[Coord] :: Sel i b row -> Sel j row p -> Coord b p '(i, j)
type InPlay b = GameMode b  'Nothing

-- | The empty board is in-play.
startInPlay :: InPlay EmptyBoard

-- | Type-safe "play".
play :: forall b i j row p. () => InPlay b -> Sel i b row -> Sel j row  'Nothing -> Sing p -> GameState p b -> GameState (AltP p) (PlaceBoard i j p b)
data GameMode :: Board -> Maybe GameOver -> Type
[GMVictory] :: AnyVictory b @@ p -> GameMode b ( 'Just ( 'GOWin p))
[GMCats] :: Refuted (Σ Piece (AnyVictory b)) -> AllFull b -> GameMode b ( 'Just  'GOCats)
[GMInPlay] :: Refuted (Σ Piece (AnyVictory b)) -> Refuted (AllFull b) -> GameMode b  'Nothing
type SomeGameMode b = Σ (Maybe GameOver) (TyCon (GameMode b))
gameMode :: forall b. Sing b -> SomeGameMode b

-- | Potential results of <a>pick</a>: A verified move, or one of many
--   failures (with proof of failures)
data Pick :: N -> N -> Board -> Type
[PickValid] :: Sel i b row -> Sel j row  'Nothing -> Pick i j b
[PickPlayed] :: Sel i b row -> Sel j row ( 'Just p) -> Sing p -> Pick i j b
[PickOoBX] :: OutOfBounds i b -> Pick i j b
[PickOoBY] :: Sel i b row -> OutOfBounds j row -> Pick i j b

-- | Validate a pick from given coordinates on a board
pick :: Sing i -> Sing j -> Sing b -> Pick i j b
data GOWinSym0 :: (~>) Piece GameOver
type GOWinSym1 (t6989586621679211940 :: Piece) = GOWin t6989586621679211940
type GOCatsSym0 = GOCats
type BoardSym0 = Board
data AltPSym0 :: (~>) Piece Piece
type AltPSym1 (a6989586621679211963 :: Piece) = AltP a6989586621679211963
data LinesSym0 :: forall a6989586621679209218. (~>) [[a6989586621679209218]] [[a6989586621679209218]]
type LinesSym1 (a6989586621679211960 :: [[a6989586621679209218]]) = Lines a6989586621679211960
type EmptyBoardSym0 = EmptyBoard
data PlaceBoardSym0 :: (~>) N ((~>) N ((~>) Piece ((~>) [[Maybe Piece]] [[Maybe Piece]])))
data PlaceBoardSym1 (a6989586621679211942 :: N) :: (~>) N ((~>) Piece ((~>) [[Maybe Piece]] [[Maybe Piece]]))
data PlaceBoardSym2 (a6989586621679211942 :: N) (a6989586621679211943 :: N) :: (~>) Piece ((~>) [[Maybe Piece]] [[Maybe Piece]])
data PlaceBoardSym3 (a6989586621679211942 :: N) (a6989586621679211943 :: N) (a6989586621679211944 :: Piece) :: (~>) [[Maybe Piece]] [[Maybe Piece]]
type PlaceBoardSym4 (a6989586621679211942 :: N) (a6989586621679211943 :: N) (a6989586621679211944 :: Piece) (a6989586621679211945 :: [[Maybe Piece]]) = PlaceBoard a6989586621679211942 a6989586621679211943 a6989586621679211944 a6989586621679211945
instance GHC.Classes.Eq TTT.Core.GameOver
instance GHC.Show.Show TTT.Core.GameOver
instance GHC.Classes.Eq TTT.Core.Piece
instance GHC.Show.Show TTT.Core.Piece
instance Data.Type.Predicate.Decide TTT.Core.SomeVictory
instance Data.Type.Predicate.Decide (Data.Type.Predicate.TyPred TTT.Core.IsPlayed)
instance Data.Singletons.Prelude.Eq.PEq TTT.Core.GameOver
instance Data.Singletons.Prelude.Eq.PEq TTT.Core.Piece
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings TTT.Core.ShowsPrec_6989586621679212002Sym0
instance Data.Singletons.Prelude.Show.PShow TTT.Core.GameOver
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings (TTT.Core.ShowsPrec_6989586621679212002Sym1 a6989586621679211999)
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings (TTT.Core.ShowsPrec_6989586621679212002Sym2 a6989586621679212000 a6989586621679211999)
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings TTT.Core.ShowsPrec_6989586621679211980Sym0
instance Data.Singletons.Prelude.Show.PShow TTT.Core.Piece
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings (TTT.Core.ShowsPrec_6989586621679211980Sym1 a6989586621679211977)
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings (TTT.Core.ShowsPrec_6989586621679211980Sym2 a6989586621679211978 a6989586621679211977)
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings TTT.Core.AltPSym0
instance Data.Singletons.Internal.SingI TTT.Core.AltPSym0
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings TTT.Core.LinesSym0
instance Data.Singletons.Internal.SingI TTT.Core.LinesSym0
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings TTT.Core.DiagonalSym0
instance Data.Singletons.Internal.SingI TTT.Core.DiagonalSym0
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings TTT.Core.PlaceBoardSym0
instance Data.Singletons.Internal.SingI TTT.Core.PlaceBoardSym0
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings (TTT.Core.PlaceBoardSym1 a6989586621679211942)
instance Data.Singletons.Internal.SingI d => Data.Singletons.Internal.SingI (TTT.Core.PlaceBoardSym1 d)
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings (TTT.Core.PlaceBoardSym2 a6989586621679211943 a6989586621679211942)
instance (Data.Singletons.Internal.SingI d1, Data.Singletons.Internal.SingI d2) => Data.Singletons.Internal.SingI (TTT.Core.PlaceBoardSym2 d1 d2)
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings (TTT.Core.PlaceBoardSym3 a6989586621679211944 a6989586621679211943 a6989586621679211942)
instance (Data.Singletons.Internal.SingI d1, Data.Singletons.Internal.SingI d2, Data.Singletons.Internal.SingI d3) => Data.Singletons.Internal.SingI (TTT.Core.PlaceBoardSym3 d1 d2 d3)
instance Data.Singletons.SuppressUnusedWarnings.SuppressUnusedWarnings TTT.Core.GOWinSym0
instance Data.Singletons.Internal.SingI TTT.Core.GOWinSym0
instance Data.Singletons.Internal.SingKind TTT.Core.GameOver
instance Data.Singletons.Prelude.Show.SShow TTT.Core.Piece => Data.Singletons.Prelude.Show.SShow TTT.Core.GameOver
instance Data.Singletons.Prelude.Eq.SEq TTT.Core.Piece => Data.Singletons.Prelude.Eq.SEq TTT.Core.GameOver
instance Data.Singletons.Decide.SDecide TTT.Core.Piece => Data.Singletons.Decide.SDecide TTT.Core.GameOver
instance Data.Singletons.ShowSing.ShowSing TTT.Core.Piece => Data.Singletons.ShowSing.ShowSing TTT.Core.GameOver
instance Data.Singletons.ShowSing.ShowSing TTT.Core.Piece => GHC.Show.Show (Data.Singletons.Internal.Sing z)
instance Data.Singletons.Internal.SingI 'TTT.Core.GOCats
instance Data.Singletons.Internal.SingI n => Data.Singletons.Internal.SingI ('TTT.Core.GOWin n)
instance Data.Singletons.Internal.SingI (Data.Singletons.Internal.TyCon1 'TTT.Core.GOWin)
instance Data.Singletons.Internal.SingKind TTT.Core.Piece
instance Data.Singletons.Prelude.Show.SShow TTT.Core.Piece
instance Data.Singletons.Prelude.Eq.SEq TTT.Core.Piece
instance Data.Singletons.Decide.SDecide TTT.Core.Piece
instance Data.Singletons.ShowSing.ShowSing TTT.Core.Piece
instance GHC.Show.Show (Data.Singletons.Internal.Sing z)
instance Data.Singletons.Internal.SingI 'TTT.Core.PX
instance Data.Singletons.Internal.SingI 'TTT.Core.PO

module TTT.Controller
type Controller m p = forall b. CContext p b -> m (Maybe (Move b))
type Move b = Σ (N, N) (TyCon (Coord b  'Nothing))
data CContext p b
CC :: Sing b -> InPlay b -> GameState p b -> Sing p -> CContext p b
[_ccBoard] :: CContext p b -> Sing b
[_ccInPlay] :: CContext p b -> InPlay b
[_ccGameState] :: CContext p b -> GameState p b
[_ccPlayer] :: CContext p b -> Sing p

-- | Picks the first valid move in the given list
priorityController :: Applicative m => [(N, N)] -> Controller m p

-- | Picks a random move
randomController :: (PrimMonad m, MonadReader (Gen (PrimState m)) m) => Controller m p
validMoves :: Sing b -> Map (N, N) (Move b)
shuffledValidMoves :: PrimMonad m => Sing b -> Gen (PrimState m) -> m [((N, N), Move b)]

-- | Return a controller that, some percentage of the time, picks randomly
--   instead.
faulty :: (PrimMonad m, MonadReader (Gen (PrimState m)) m) => Double -> Controller m p -> Controller m p

module TTT.Controller.Minimax

-- | This minimax implementation is "verified" in the sense that it cannot
--   make any illegal moves. We sort of get this "for free". It is also
--   verified that we will rank and sort the pieces correctly (assuming the
--   Ord instance is sound) depending on who is playing.
minimaxController :: (PrimMonad m, MonadReader (Gen (PrimState m)) m) => N -> Controller m p

-- | This minimax implementation is "more verified" than the original one.
--   In addition to the verifications of the original one, we verify that
--   the search algorithm doesn't go further than the number of steps, and
--   also that at each step we are being consistent with the board and
--   possible moves.
--   
--   However, it is not a "verified AI" in that it can still make the wrong
--   choice in the end. The only thing verified really is that it
--   interprets the information it sees correctly.
minimaxController' :: (PrimMonad m, MonadReader (Gen (PrimState m)) m) => N -> Controller m p
newtype RankRes (p :: Piece)
RR :: Maybe GameOver -> RankRes
[getRR] :: RankRes -> Maybe GameOver
instance GHC.Classes.Eq (TTT.Controller.Minimax.RankRes p)
instance GHC.Show.Show (TTT.Controller.Minimax.RankRes p)
instance Data.Singletons.Internal.SingI p => GHC.Classes.Ord (TTT.Controller.Minimax.RankRes p)
instance Data.Singletons.Decide.SDecide k => Data.GADT.Compare.GEq Data.Singletons.Internal.Sing

module TTT.Controller.Console

-- | Will never allow any invalid moves.
consoleController :: MonadIO m => Controller m p
displayBoard :: Board -> String
